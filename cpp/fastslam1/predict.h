#ifndef PREDICT_H
#define PREDICT_H

#include <Eigen/Dense>
#include "core/particle.h"
#include "core/multivariate_gauss.h"

using namespace Eigen;

/*!
    Predict step of the algorithm, predicts the state of a single particle.
    Uses multivariate_gauss.
    @param[out] particle Particle whose position is predicted.
    @param[in]  V        float, velocity that has been generated by add_control_noise
    @param[in]  G        float, steer angle that has been modified by add_control_noise
    @param[in]  Q        matrix of control noises as in configfile.cpp
    @param[in]  WB        wheelbase, float, metres. In configfile.cpp
    @param[in]  dt        seconds, time interval between control signals, float. In configfile.cpp
    @param[in]  addrandom        0/1, if sampling from predict noise, for fs1 usually true/1
 */
void predict(Particle &particle,double V,double G,Matrix2d Q, double WB,double dt, int addrandom);

/*!
    Brings the angle to a range between -pi and +pi. If the angle is greater than 180 degrees,
    then we subtract 360 degrees (2pi), the same if it is smaller than -180 degrees.
    @param[out] return the modified angle in radians
    @param[in]  ang     angle in radians
 */
double pi_to_pi2(double ang); 

#endif //PREDICT_H
